import dayjs from 'dayjs';
export function getMonths(pastYearRange, futureYearRange) {
    var currentYear = dayjs().year();
    var startYear = currentYear - pastYearRange;
    var endYear = currentYear + futureYearRange;
    var months = [];
    for (var i = 0; i < endYear - startYear; i++) {
        var year = startYear + i;
        for (var j = 1; j <= 12; j++) {
            var id = '';
            id = year + "-" + (j <= 9 ? '0' : '') + j;
            months.push({
                id: id,
                year: year,
                month: j,
            });
        }
    }
    return months;
}
export function getWeeks(date, selectedStartDate, selectedEndDate) {
    var DATE_FORMAT = 'YYYY-MM-DD';
    var today = dayjs().format(DATE_FORMAT);
    var targetMonth = dayjs(date).month();
    var month = [];
    var calcDate = dayjs(date).startOf('month');
    do {
        var week = [];
        for (var i = 0; i < 7; i++) {
            var dayObj = {
                type: null,
                date: null,
                isToday: false,
                isBeforeToday: false,
                isAfterToday: false,
                isHoliday: false,
            };
            var formattedCalcDate = calcDate.format(DATE_FORMAT);
            if (i == calcDate.day() && calcDate.month() == targetMonth) {
                if (selectedStartDate && selectedStartDate === formattedCalcDate) {
                    if (!selectedEndDate) {
                        dayObj.type = 'single';
                    }
                    else {
                        dayObj.type = 'start';
                    }
                }
                if (selectedEndDate && selectedEndDate == formattedCalcDate) {
                    if (selectedStartDate === selectedEndDate) {
                        dayObj.type = 'single';
                    }
                    else {
                        dayObj.type = 'end';
                    }
                }
                if (selectedStartDate &&
                    selectedStartDate < formattedCalcDate &&
                    selectedEndDate &&
                    selectedEndDate > formattedCalcDate) {
                    dayObj.type = 'between';
                }
                var date_1 = calcDate.clone().format(DATE_FORMAT);
                var passedDayFromToday = calcDate.diff(dayjs(), 'day') < 0;
                var futureDayFromToday = calcDate.diff(dayjs(), 'hours') > 0;
                dayObj.date = date_1;
                if (date_1 === today) {
                    dayObj.isToday = true;
                }
                if (passedDayFromToday) {
                    dayObj.isBeforeToday = true;
                }
                if (futureDayFromToday) {
                    dayObj.isAfterToday = true;
                }
                if (i === 0 || i === 6) {
                    dayObj.isHoliday = true;
                }
                week.push(dayObj);
                calcDate = calcDate.add(1, 'day');
            }
            else {
                if (selectedStartDate &&
                    selectedEndDate &&
                    selectedStartDate < selectedStartDate &&
                    selectedEndDate >= selectedStartDate) {
                    dayObj.type = 'between';
                }
                week.push(dayObj);
            }
        }
        month.push(week);
    } while (calcDate.month() == targetMonth);
    return month;
}
//# sourceMappingURL=data.js.map